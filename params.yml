---
# Deployment parameters.
# The deployment process is divided into various stages.

# Deploy local L1.
deploy_l1: true

# Deploy zkevm contracts on L1 (and also fund accounts).
deploy_zkevm_contracts_on_l1: true

# Deploy zkevm node and cdk peripheral databases.
deploy_databases: true

# Deploy cdk central/trusted environment.
deploy_cdk_central_environment: true

# Deploy cdk/bridge infrastructure.
deploy_cdk_bridge_infra: true

# Deploy cdk-erigon node.
deploy_cdk_erigon_node: true

args:
  # Suffix appended to service names.
  # Note: It should be a string.
  deployment_suffix: "-001"

  # The global log level that all components of the stack should log at.
  # Valid values are "error", "warn", "info", "debug", and "trace".
  global_log_level: info

  # The type of the sequencer to deploy.
  # Options:
  # - 'erigon': Use the new sequencer (https://github.com/0xPolygonHermez/cdk-erigon).
  # - 'zkevm': Use the legacy sequencer (https://github.com/0xPolygonHermez/zkevm-node).
  sequencer_type: erigon

  # Deploy agglayer.
  deploy_agglayer: true

  # The type of data availability to use.
  # Options:
  # - 'rollup': Transaction data is stored on-chain on L1.
  # - 'cdk-validium': Transaction data is stored off-chain using the CDK DA layer and a DAC.
  # In the future, we would like to support external DA protocols such as Avail, Celestia and Near.
  data_availability_mode: cdk-validium

  # Additional services to run alongside the network.
  # Options:
  # - blockscout
  # - blutgang
  # - pless_zkevm_node
  # - prometheus_grafana
  # - tx_spammer
  additional_services: []

  # Docker images and repositories used to spin up services.
  zkevm_prover_image: hermeznetwork/zkevm-prover:v6.0.3-RC20
  zkevm_node_image: hermeznetwork/zkevm-node:v0.7.0
  cdk_validium_node_image: 0xpolygon/cdk-validium-node:0.7.0-cdk
  cdk_node_image: ghcr.io/0xpolygon/cdk:0.0.9
  zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.7
  zkevm_contracts_image: leovct/zkevm-contracts # the tag is automatically replaced by the value of /zkevm_rollup_fork_id/

  # zkevm_agglayer_image: 0xpolygon/agglayer:0.1.3
  zkevm_agglayer_image: ghcr.io/agglayer/agglayer-rs:main
  zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.5.0-RC9
  zkevm_bridge_ui_image: leovct/zkevm-bridge-ui:multi-network
  zkevm_bridge_proxy_image: haproxy:2.9.9-bookworm
  zkevm_sequence_sender_image: hermeznetwork/zkevm-sequence-sender:v0.2.0-RC4
  cdk_erigon_node_image: hermeznetwork/cdk-erigon:v2.0.0-beta17
  zkevm_pool_manager_image: hermeznetwork/zkevm-pool-manager:v0.1.0-RC1

  # Port configuration.
  zkevm_hash_db_port: 50061
  zkevm_executor_port: 50071
  zkevm_aggregator_port: 50081
  zkevm_pprof_port: 6060
  zkevm_prometheus_port: 9091
  zkevm_data_streamer_port: 6900
  zkevm_rpc_http_port: 8123
  zkevm_rpc_ws_port: 8133
  zkevm_bridge_rpc_port: 8080
  zkevm_bridge_grpc_port: 9090
  zkevm_bridge_ui_port: 80
  zkevm_agglayer_port: 4444
  zkevm_dac_port: 8484
  zkevm_pool_manager_port: 8545

  # Addresses and private keys of the different components.
  # They have been generated using the following command:
  # polycli wallet inspect --mnemonic 'lab code glass agree maid neutral vessel horror deny frequent favorite soft gate galaxy proof vintage once figure diary virtual scissors marble shrug drop' --addresses 9 | tee keys.txt | jq -r '.Addresses[] | [.ETHAddress, .HexPrivateKey] | @tsv' | awk 'BEGIN{split("sequencer,aggregator,claimtxmanager,timelock,admin,loadtest,agglayer,dac,proofsigner",roles,",")} {print "zkevm_l2_" roles[NR] "_address: \"" $1 "\""; print "zkevm_l2_" roles[NR] "_private_key: \"0x" $2 "\"\n"}'
  zkevm_l2_sequencer_address: "0x54A9C1a865a1E81183F6356A004bE98bbEF84805"
  zkevm_l2_sequencer_private_key: "0x0ce6f7df1a782f46cf713b221a030a9c79be2d36d6797f0f34823a979db1e097"
  
  zkevm_l2_aggregator_address: "0x3BE8a1ceB1a68Cd67fB62a185a5e8C6Be557B332"
  zkevm_l2_aggregator_private_key: "0x9a1fae9b3c401736f1576f0bd31da49043c6e6eb8b0652fbb82ae72f9914fdb5"
  
  zkevm_l2_claimtxmanager_address: "0x28e72c5fFB70328F1aCfa56Efba37eFc28f0d927"
  zkevm_l2_claimtxmanager_private_key: "0xceb25920c496f5e9fbc34bd7651b368058004664eb4d8c5300553498c7a9e0a8"
  
  zkevm_l2_timelock_address: "0xc3cFD14dA05a5A9FF9f156c894ae84d84A8E1655"
  zkevm_l2_timelock_private_key: "0xb225baaa2da3b6cb32ab6155ad848b1983b116ba4619bfe2eda2986c84b1af03"
  
  zkevm_l2_admin_address: "0x4d828c3eD2cb8460a7201A3Cdc064a49732A4Bcd"
  zkevm_l2_admin_private_key: "0x78b1e9ade82585bbf87ee56496c72af4892dd99784459dca2d0817c1937fd4b8"
  
  zkevm_l2_loadtest_address: "0x4d5758a976080419Cb149a9DeF1645148CB3FDE1"
  zkevm_l2_loadtest_private_key: "0x13eb235b98071c86af888ec7e3b80d17fa58da991474fa712d6b92c1c0d65f8d"
  
  zkevm_l2_agglayer_address: "0xdcb615bAf02Bb751027217124F15ab04d35E4184"
  zkevm_l2_agglayer_private_key: "0x22bd6c398bbb81e519782ad1c47ed67216c4614538f124c7de771b4bdae3f322"
  
  zkevm_l2_dac_address: "0x11ae037998105F3180095234Ae4b9c5C2bfDEf39"
  zkevm_l2_dac_private_key: "0x85d1af7137a436fd18cc8c64a9ce1a374ef75516cbe5eb8a6b233a0111466d75"
  
  zkevm_l2_proofsigner_address: "0xaF39dfdF6a5EC47bF2a69F4C16Cc336FabC4cC9a"
  zkevm_l2_proofsigner_private_key: "0xc53909133e51ccc51d4e64faf03f4ac97f51e3c20af9b886d55e3455027f2c25"

  # Keystore password.
  zkevm_l2_keystore_password: pSnv6Dh5s9ahuzGzH9RoCDrKAMddaX3m

  ## L1 configuration.
  l1_chain_id: 271828
  l1_preallocated_mnemonic: oyster shaft soccer crawl sample average actual note urban hope drip ladder
  l1_funding_amount: 100ether
  l1_rpc_url: http://el-1-geth-lighthouse:8545
  l1_ws_url: ws://el-1-geth-lighthouse:8546
  # https://github.com/ethpandaops/ethereum-package/tree/main?tab=readme-ov-file#configuration
  l1_additional_services: [
  # blockscout, # block explorer
  # dora, # beaconchain explorer
  # el_forkmon, # fork monitor tool
  ]
  l1_preset: minimal
  l1_seconds_per_slot: 1

  ## Rollup configuration.

  # The chain id of the new rollup.
  zkevm_rollup_chain_id: 10101

  # The rollupID of the CDK.
  zkevm_rollup_id: 1

  # The fork id of the new rollup. It indicates the prover (zkROM/executor) version.
  zkevm_rollup_fork_id: 9

  # If erigon is being used as the sequencer,
  # This flag will enable a stateless executor to verify the execution of the batches.
  erigon_strict_mode: true
  # This flag will allow pre EIP155 transactions.
  erigon_pre_eip155_transactions: true

  # The address of the rollup manager contract on L1.
  # If specified, the rollup data will be retrieved from this contract instead of using the contracts service.
  # zkevm_rollup_manager_address: ""
  # # The block number at which the rollup manager contract was deployed.
  # zkevm_rollup_manager_block_number: 0
  # # The address of the global exit root contract on L2.
  # zkevm_global_exit_root_l2_address: ""
  # # The address of the Polygon data committee contract on L1.
  # polygon_data_committee_address: ""

  polygon_zkevm_explorer: https://explorer.private/
  l1_explorer_url: https://sepolia.etherscan.io/

  # If this is true, we will automatically deploy an ERC20 contract on
  # L1 to be used at the gasTokenAddress
  zkevm_use_gas_token_contract: false

  ## Permissionless node configuration.
  trusted_sequencer_node_uri: zkevm-node-sequencer-001:6900
  zkevm_aggregator_host: zkevm-node-aggregator-001
  genesis_file: templates/permissionless-node/genesis.json
